{
    "console.warn": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "cw",
        "body": [
            "console.warn(${1:variable});"
        ],
        "description": "console.warn"
    },
    "console.log": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "cl",
        "body": [
            "console.log(${1:variable});"
        ],
        "description": "console.log"
    },
    "for loop": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "for",
        "body": [
            "for (var i = 0; i < ${1:array_name}.length; i++) {"
            "    // while (${1:array_name}[i] === ${2:value_to_compare}) {"
            "    //logic here;"
            "    //${1:array_name}.splice(i, 1);"
            "    }"
            "}"
        ],
        "description": "for loop"
    },
    "split": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "sp",
        "body": [
            "split('$1');"
        ],
        "description": "split"
    },
    "join": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "j",
        "body": [
            "join('');"
        ],
        "description": "join"
    },
    "split join": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "spl",
        "body": [
            "split('$1').join('');"
        ],
        "description": "split join"
    },
    "variable": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "v",
        "body": [
            "var ${1:variable} = $2;"
        ],
        "description": "variable"
    },
    "debug logger": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "dbg",
        "body": [
            "var DEBUG = true; // true or false to Enable/Disable logging",
            "var LOG_PREFIX = '[DEBUG]';",
            "var log = function(){",
            "	if(DEBUG){",
            "		var args = Array.prototype.slice.call(arguments);",
            "		args.unshift(LOG_PREFIX + ' ');",
            "		console.log.apply(console, args);",
            "	}",
            "}"
        ],
        "description": "create debug logger function"
    },
    "try catch": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "trc",
        "body": [
            "try {",
            "	${1://logic here}",
            "} catch (err) {",
            "	console.warn('ERROR - '' + err);",
            "   ${2://some more logic here}",
            "}"
        ],
        "description": "Try Cacth Statement"
    },
    "documenting": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "doc",
        "body": [
            "/**",
            "",
            "	* Description: ",
            "	* Type: ",
            "	* Parameters:",
            "	* Returns:",
            "",
            "*/"
        ],
        "description": "documenting code"
    },
    "addEventListener": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "addevnt",
        "body": [
            "addEventListener('click', function(event) {",
            "	//event.preventDefault();",
            "});"
        ],
        "description": "addEventListener"
    },
    "querySelector": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "qs",
        "body": [
            "// querySelector, jQuery style",
            "var $ = function (selector) {",
            "	return document.querySelector(selector);",
            "};"
        ],
        "description": "querySelector"
    },
    "ajax Post": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "post",
        "body": [
            "var request = new XMLHttpRequest();",
            "request.open('POST', '/my/url', true);",
            "request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');",
            "request.send(data);"
        ],
        "description": "ajax Post"
    },
    "ajax request": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "ajx",
        "body": [
            "var request = new XMLHttpRequest();",
            "request.open('GET', '/my/url', true);",
            "",
            "request.onload = function() {",
            "  if (request.status >= 200 && request.status < 400) {",
            "	// Success!",
            "	var resp = request.responseText;",
            "  } else {",
            "	// We reached our target server, but it returned an error",
            "",
            "  }",
            "};",
            "",
            "request.onerror = function() {",
            "  // There was a connection error of some sort",
            "};",
            "",
            "request.send();"
        ],
        "description": "ajax Request"
    },
    "Bubble Sort ES6": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "bbl",
        "body": [
            "const bubbleSort = arr => {",
            "	for (let i = 0, endI = arr.length - 1; i < endI; i++) {",
            "		let wasSwap = false;",
            "		for (let j = 0, endJ = endI - i; j < endJ; j++) {",
            "			if (arr[j] > arr[j + 1]) {",
            "				[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];",
            "				wasSwap = true;",
            "			}",
            "		}",
            "		if (!wasSwap) break;",
            "	}",
            "	return arr;",
            "};"
        ],
        "description": "Bubble Sort ES6"
    },
    "Bubble Sort": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "bbls",
        "body": [
            "function bubbleSort(arr) {",
            "	for (var i = 0, endI = arr.length - 1; i < endI; i++) {",
            "		var wasSwap = false;",
            "		for (var j = 0, endJ = endI - i; j < endJ; j++) {",
            "			if (arr[j] > arr[j + 1]) {",
            "				var swap = arr[j];",
            "				arr[j] = arr[j + 1];",
            "				arr[j + 1] = swap;",
            "				wasSwap = true;",
            "			}",
            "		}",
            "		if (!wasSwap) break;",
            "	}",
            "	return arr;",
            "}"
        ],
        "description": "Bubble Sort function"
    },
    "Performance": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "prfm",
        "body": [
            "var t0 = window.performance.now();",
            "//someFunction();",
            "var t1 = window.performance.now();",
            "console.log('Executed for ' + (t1 - t0) + ' milliseconds.');"
        ],
        "description": "some function performance"
    },
    "Angular g_form": {
        "scope": "javascript,typescript,plaintext",
        "prefix": "gf",
        "body": [
            "function accessGlideForm(fieldname) {",
            "	var gf = angular.element(document.getElementById(fieldname)).scope().getGlideForm();",
            "	return gf;",
            "}",
            "var gForm = accessGlideForm();"
        ],
        "description": "get g_form access using angular"
    }
}
